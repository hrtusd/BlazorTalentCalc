@inject ClassService classService
@inject AppState appState
@implements IDisposable

<ClassSelector SelectedClass="selectedClass" OnClassSelected="ClassChange" />

@if (specializations != null)
{
    <div class="spec-trees">
        @foreach (var spec in specializations)
        {
            <SpecializationTree Specialization="spec" />
        }
    </div>
}

<p>Total points: @appState.TotalPoints</p>
<p>Available points: @(appState.AvailablePoints - appState.TotalPoints)</p>

@*<h5>Learned ranks:</h5>
    @foreach (var rank in appState.Build.Ranks)
    {
        <p>@rank.Talent.Name (@rank.Rank/@rank.Talent.Ranks.Count)</p>
    }*@

@code {

    private TalentClass selectedClass;

    private IList<ClassSpecialization> specializations;

    protected override void OnInitialized()
    {
        appState.OnChange += StateHasChanged;

        appState.SetTotalPoints(0);
    }

    public void ClassChange(TalentClass talentClass)
    {
        selectedClass = talentClass;

        appState.SetBuildClass(selectedClass);

        specializations = classService.GetClassSpecializations(selectedClass);
        appState.SetTotalPoints(0);
    }

    public void Dispose()
    {
        appState.OnChange -= StateHasChanged;
    }
}
