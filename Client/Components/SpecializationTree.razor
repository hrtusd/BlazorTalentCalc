@inject AppState appState
@implements IDisposable 

<div class="spec-tree-wrap">
    <h5>@Specialization.Name (@(appState.SpecializationPoints.ContainsKey(Specialization.Key) ? appState.SpecializationPoints[Specialization.Key] : 0))</h5>

    <div class="spec-tree">
        @if (Specialization.Talents != null)
        {
            var maxRow = Specialization.Talents.Select(x => x.Position.Row).Max();
            for (int row = 0; row <= maxRow; row++)
            {
                for (int col = 0; col < 4; col++)
                {
                    var talent = Specialization.Talents.FirstOrDefault(x => x.Position.Row == row && x.Position.Column == col);
                    if (talent != null)
                    {
                        <Talent TalentNode="talent" />
                    }
                    else
                    {
                        <div></div>
                    }
                }
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public ClassSpecialization Specialization { get; set; }

    protected override void OnInitialized()
    {
        appState.OnChange += StateHasChanged;

        appState.SetTotalPoints(0);
    }

    public void Dispose()
    {
        appState.OnChange -= StateHasChanged;
    }
}
