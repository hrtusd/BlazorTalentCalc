@inject AppState appState
@implements IDisposable 

<Tooltip>
    <ChildContent>
        <div class="talent-node @talentStateClass" oncontextmenu="return false;" @onmouseup="e => HandleTalentClick(e)">
            <img src="img/talents/@($"{appState.Build.Class.Key}_{TalentNode.Key}.png")" />
            <span>@rank/@maxRank</span>
        </div>
    </ChildContent>
    <TooltipContent>
        @TalentNode.Name - @rank/@maxRank<br />
        @if (rank > 0)
        {
            @:Current rank:
            @string.Format(TalentNode.TextFormat, TalentNode.Ranks.First(x => x.Rank == rank).Values)
            <br />
        }
        @if (rank < maxRank)
        {
            @:Next rank:
            @string.Format(TalentNode.TextFormat, TalentNode.Ranks.First(x => x.Rank == rank + 1).Values)
            <br />
        }
    </TooltipContent>
</Tooltip>

@code {
    [Parameter]
    public TalentNode TalentNode { get; set; }

    private int rank;
    private int maxRank;
    private TalentState talentState;
    private int requiredPoints;

    private int specPoints;

    private string talentStateClass;

    protected override void OnInitialized()
    {
        appState.OnChange += PointsUpdated;

        rank = 0;
        maxRank = TalentNode.Ranks.Count;
        requiredPoints = TalentNode.Position.Row * 5;

        talentState = TalentState.Disabled;

        appState.SetSpecializationPoints(TalentNode.Specialization.Key, 0);
        specPoints = appState.SpecializationPoints.ContainsKey(TalentNode.Specialization.Key) ? appState.SpecializationPoints[TalentNode.Specialization.Key] : 0;

        PointsUpdated();

        //if (requiredPoints <= specPoints)
        //    talentState = TalentState.Enabled;

        //talentStateClass = talentState switch
        //{
        //    TalentState.Disabled => "disabled",
        //    TalentState.Enabled => "enabled",
        //    TalentState.PartiallyActive => "partially-active",
        //    TalentState.FullyActive => "fully-active",
        //    _ => ""
        //};
    }

    private void PointsUpdated()
    {
        specPoints = appState.SpecializationPoints.ContainsKey(TalentNode.Specialization.Key) ? appState.SpecializationPoints[TalentNode.Specialization.Key] : 0;

        if (talentState == TalentState.Disabled && requiredPoints <= specPoints)
            talentState = TalentState.Enabled;

        if (talentState != TalentState.Disabled && requiredPoints > specPoints)
            talentState = TalentState.Disabled;

        talentStateClass = talentState switch
        {
            TalentState.Disabled => "disabled",
            TalentState.Enabled => "enabled",
            TalentState.PartiallyActive => "partially-active",
            TalentState.FullyActive => "fully-active",
            _ => ""
        };
    }

    private void HandleTalentClick(MouseEventArgs e)
    {
        if (e.Button != 0 && e.Button != 2 || talentState == TalentState.Disabled)
            return;

        var action = e.Button == 0 ? BuildAction.Learn : BuildAction.Unlearn;

        switch (action)
        {
            case BuildAction.Unlearn:
                UnlearnRank();
                break;
            case BuildAction.Learn:
                LearnRank();
                break;
        }
    }

    private void LearnRank()
    {
        if (appState.TotalPoints < appState.AvailablePoints &&
            rank < maxRank) // TODO: TalentNode Requirement
        {
            rank += 1;

            appState.AddBuildRank(TalentNode.Ranks.FirstOrDefault(x => x.Rank == rank));

            if (rank > 0 && rank < maxRank) talentState = TalentState.PartiallyActive;
            else if (rank == maxRank) talentState = TalentState.FullyActive;

            appState.SetTotalPoints(appState.TotalPoints + 1);
            appState.SetSpecializationPoints(TalentNode.Specialization.Key, specPoints + 1);
        }
    }

    private void UnlearnRank()
    {
        if (rank == 0)
            return;

        var currentRow = TalentNode.Position.Row;
        var maxRow = appState.Build.Ranks.Where(x => x.Talent.Specialization.Key == TalentNode.Specialization.Key).Select(x => x.Talent.Position.Row).Max();

        var canUnlearn = true;

        for (int i = currentRow; i < maxRow; i++)
        {
            var sameRowRanks = appState.Build.Ranks.Where(x => x.Talent.Specialization.Key == TalentNode.Specialization.Key && x.Talent.Position.Row <= i).Count();
            var pointsInUpperRow = appState.Build.Ranks.Where(x => x.Talent.Position.Row == i + 1).Count();

            if (pointsInUpperRow > 0 && sameRowRanks <= (i + 1) * 5)
            {
                canUnlearn = false;
                break;
            }
        }

        if (canUnlearn) // TODO: TalentNode Requirement
        {
            appState.RemoveBuildRank(TalentNode.Ranks.FirstOrDefault(x => x.Rank == rank));

            rank -= 1;

            if (rank > 0 && rank < maxRank) talentState = TalentState.PartiallyActive;
            else if (rank == 0) talentState = TalentState.Enabled;

            appState.SetTotalPoints(appState.TotalPoints - 1);
            appState.SetSpecializationPoints(TalentNode.Specialization.Key, specPoints - 1);
        }
    }

    public void Dispose()
    {
        appState.OnChange -= PointsUpdated;
    }
}
